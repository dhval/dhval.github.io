<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dhval Mudawal</title>
    <description>Rants</description>
    <link>http://udaytv.github.io</link>
    <atom:link href="http://udaytv.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Install RabbitMQ on Ubuntu LTS</title>
        <description>&lt;p&gt;I was looking for a reliable and fast open source MQ for my personnel cloud. Here is upto date documentation for installing RabbitMQ on &lt;a href=&quot;https://www.rabbitmq.com/install-debian.html&quot;&gt;Ubuntu&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/rabbitmq-screen.png&quot; alt=&quot;_config.yml&quot;&gt;&lt;/p&gt;

&lt;p&gt;RabbitMQ is included in Debain and Ubuntu but is v3.2 while the latest available is v3.5. You need to update APT repositoty. Make sure you get &amp;#39;stable&amp;#39; branch.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;echo &amp;quot;deb http://www.rabbitmq.com/debian/ stable main&amp;quot;  | sudo tee  /etc/apt/sources.list.d/rabbitmq.list &amp;gt; /dev/null
sudo wget http://www.rabbitmq.com/rabbitmq-signing-key-public.asc
sudo apt-key add rabbitmq-signing-key-public.asc
sudo apt-get update
sudo apt-get install rabbitmq-server -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If there is an erlang already installed you might have to remove it manually &lt;code&gt;sudo apt-get remove erlang-nox&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next you can check users, new &amp;#39;rabbitmq&amp;#39; user would be added. Also if you do service &lt;code&gt;--status-all&lt;/code&gt;, you should see &lt;code&gt;rabbitmq-server&lt;/code&gt; service.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo service rabbitmq-server start | stop | restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can install management console on port 15672, default user is guest and passord is guest.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo rabbitmq-plugins enable rabbitmq_management
sudo rabbitmq-plugins enable rabbitmq_stomp
sudo service rabbitmq-server restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can monitor usage on command line using &lt;code&gt;rabbitmqctl status&lt;/code&gt;. You can use web console if you do not like rabbitmqctl CLI. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo rabbitmqctl stop | restart | status
sudo rabbitmqctl add_user user_name password_for_this_user
sudo rabbitmqctl set_user_tags user_name administrator
sudo rabbitmqctl set_permissions -p / user_name &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot; &amp;quot;.*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Delete guest user &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;sudo rabbitmqctl delete_user guest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5&gt;Read ...&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rabbitmq.com/install-debian.html&quot;&gt;Install RabbitMQ on Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://java.dzone.com/category/tags/rabbitmq&quot;&gt;RabbitMQ on DZone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/rabbitmq&quot;&gt;RabbitMQ samples on github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 03 Mar 2015 00:00:00 -0500</pubDate>
        <link>http://udaytv.github.io/Install-RabbitMQ/</link>
        <guid isPermaLink="true">http://udaytv.github.io/Install-RabbitMQ/</guid>
      </item>
    
      <item>
        <title>Using spring boot for REST service using JPA</title>
        <description>&lt;p&gt;With &lt;a href=&quot;http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/&quot;&gt;spring-boot&lt;/a&gt; it is incredibly easy to create a JavaEE project using embedded container. Unlike Spring-ROO it is very easy to migrate to production environment. Without any boiler plate code you can be sure of not using deprecated spring api&amp;#39;s from wild. &lt;/p&gt;

&lt;p&gt;You can view complete source code on &lt;a href=&quot;https://github.com/dhval/spring-boot-rest&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;h5&gt;How to run this sample.&lt;/h5&gt;

&lt;p&gt;1.&lt;strong&gt;Using IDE.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is web (war) &lt;code&gt;mvn package&lt;/code&gt; package that can easily be deployed using your favorite Java IDE with a web container.&lt;/p&gt;

&lt;p&gt;You would need to create a JNDI Datasource, /var/lib/tomcat7/conf/context.xml. The JPA-Hibernate would take care of generating tables and sql-ddl. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;Resource auth=&amp;quot;Container&amp;quot; driverClassName=&amp;quot;com.mysql.jdbc.Driver&amp;quot; maxActive=&amp;quot;10&amp;quot; maxIdle=&amp;quot;5&amp;quot; maxWait=&amp;quot;1000&amp;quot; name=&amp;quot;jdbc/earth&amp;quot; type=&amp;quot;javax.sql.DataSource&amp;quot; maxAge=&amp;quot;180000&amp;quot; testOnBorrow=&amp;quot;true&amp;quot; testWhileIdle=&amp;quot;true&amp;quot; validationInterval=&amp;quot;0&amp;quot; url=&amp;quot;jdbc:mysql://localhost:3306/motherearth?autoReconnect=true&amp;quot; username=&amp;quot;user&amp;quot; password=&amp;quot;password&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2.&lt;strong&gt;Command Line&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To run using spring boot, &lt;code&gt;mvn spring-boot:run&lt;/code&gt;. Embedded server do not have any JNDI by default, you can create it &lt;a href=&quot;http://stackoverflow.com/questions/24941829/how-to-create-jndi-context-in-spring-boot-with-embedded-tomcat-container&quot;&gt;programmatically&lt;/a&gt; or just use plain datasource as follows. &lt;/p&gt;

&lt;p&gt;Update pom.xml packaging to jar.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Instead of using JNDI-Datasource &lt;code&gt;spring.datasource.jndi-name&lt;/code&gt;, define your connection parameters in application.properties file. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://${mysql.host}:${mysql.port}/${mysql.database-name}?autoReconnect=true
spring.datasource.username=${mysql.user}
spring.datasource.password=${mysql.pass}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Mon, 27 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://udaytv.github.io/Spring-Boot-REST/</link>
        <guid isPermaLink="true">http://udaytv.github.io/Spring-Boot-REST/</guid>
      </item>
    
      <item>
        <title>From Java web jar to bower registry</title>
        <description>&lt;p&gt;Java web jars provide static resources for web projects, it supports very good integration with maven (or gradle) by creating overlays that can be unzipped and used inside war. Maven war plugin makes this drop-dead simple.&lt;/p&gt;

&lt;p&gt;By using &lt;a href=&quot;http://bower.io/&quot;&gt;bower&lt;/a&gt; you can manage all your web resources much easier, it is significantly easier to update dependecies to newer versions. It start to make more sense if you use node-grunt tooling instead of hacking your way around maven with bunch of odd custom shell scripts. &lt;/p&gt;

&lt;p&gt;Once you start using bower then it is time to eat your own dog food. Bower facilitates you to publish your web resources (internally or externally) to a git server, all you have to do is &amp;#39;git tag&amp;#39; and push your files. Bower look at tarballs associted with tags to infer version.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;quot;dependencies&amp;quot;: {
    &amp;quot;json3&amp;quot;: &amp;quot;^3.3.0&amp;quot;,
        ....
    &amp;quot;common&amp;quot;: &amp;quot;git://github.com/user/base-web.git&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can reference dependency from another git project like below, notice .git/ at end.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;quot;dependencies&amp;quot;: {
    &amp;quot;json3&amp;quot;: &amp;quot;^3.3.0&amp;quot;,
        ....
    &amp;quot;common&amp;quot;: &amp;quot;/Users/dhval/java/git-repository/jnet/base-web/.git/&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is a sample flow of publishing a existing github project as npm registry.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git tag &amp;quot;v0.0.0&amp;quot;
git push origin --tags

bower register common git://github.com/user/base-web.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To automate above steps you can use &lt;a href=&quot;https://github.com/vojtajina/grunt-bump&quot;&gt;grunt-bump&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;grunt.initConfig({
bump: {
    options: {
        files: [
            &amp;quot;package.json&amp;quot;,
            &amp;quot;bower.json&amp;quot;
        ],
        push: &amp;quot;true&amp;quot;,
        pushTo: &amp;#39;origin&amp;#39;
    }
}
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Time to tell &lt;a href=&quot;http://maven.apache.org/plugins/maven-war-plugin/index.html&quot;&gt;maven-war-plugin&lt;/a&gt; to copy all resources from Project_Root/dist into exploded-war directory. So that all maven based IDE like IntelliJ can create war naturally. Note web resources are different from regular resources like xml, properties, schema beans etc. You use &lt;a href=&quot;https://maven.apache.org/plugins/maven-resources-plugin/index.html&quot;&gt;maven-resources-plugin&lt;/a&gt; and &lt;code&gt;mvn resources:copy-resources&lt;/code&gt; for them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Before&lt;/strong&gt; &lt;code&gt;mvn war:exploded&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Root
|---dist
    |---common &amp;lt;!-- Bower created internal resources here--&amp;gt;
    |---....
    |---json3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;After&lt;/strong&gt; I need my internal dependencies in web/{ js| css} and external dependencies in web/dist/dependency-name/ with their licenses.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;target
|---&amp;lt;app-name&amp;gt;
    |
    |----dist/json3
    |----js/common
    |----css/common
    |----css/img
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We need to add &lt;code&gt;webReources&lt;/code&gt; element in our war-plugin config.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;build&amp;gt;
&amp;lt;plugins&amp;gt;   
&amp;lt;plugin&amp;gt;
&amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;maven-war-plugin&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;2.3&amp;lt;/version&amp;gt;
&amp;lt;configuration&amp;gt;
    &amp;lt;archive&amp;gt;
        &amp;lt;manifest&amp;gt;
            &amp;lt;classpathPrefix&amp;gt;WEB-INF/lib/&amp;lt;/classpathPrefix&amp;gt;
            &amp;lt;addClasspath&amp;gt;true&amp;lt;/addClasspath&amp;gt;
        &amp;lt;/manifest&amp;gt;
    &amp;lt;/archive&amp;gt;
    &amp;lt;!-- Filter, replace properties with values. --&amp;gt;
    &amp;lt;filters&amp;gt;
        &amp;lt;filter&amp;gt;src/main/resources/application.properties&amp;lt;/filter&amp;gt;
    &amp;lt;/filters&amp;gt;
    &amp;lt;nonFilteredFileExtensions&amp;gt;
        &amp;lt;!-- default value contains jpg,jpeg,gif,bmp,png --&amp;gt;
        &amp;lt;nonFilteredFileExtension&amp;gt;pdf&amp;lt;/nonFilteredFileExtension&amp;gt;
    &amp;lt;/nonFilteredFileExtensions&amp;gt;
    &amp;lt;!-- Copy resources to different directories. --&amp;gt;
    &amp;lt;webResources&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;excludes&amp;gt;
                &amp;lt;exclude&amp;gt;**/common/**&amp;lt;/exclude&amp;gt;
            &amp;lt;/excludes&amp;gt;
            &amp;lt;directory&amp;gt;dist&amp;lt;/directory&amp;gt;
            &amp;lt;targetPath&amp;gt;dist&amp;lt;/targetPath&amp;gt;
            &amp;lt;!-- it&amp;#39;s not a good idea to filter binary files --&amp;gt;
            &amp;lt;filtering&amp;gt;false&amp;lt;/filtering&amp;gt;
        &amp;lt;/resource&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;dist/common/js&amp;lt;/directory&amp;gt;
            &amp;lt;targetPath&amp;gt;js/common&amp;lt;/targetPath&amp;gt;
            &amp;lt;filtering&amp;gt;false&amp;lt;/filtering&amp;gt;
        &amp;lt;/resource&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;dist/common/css&amp;lt;/directory&amp;gt;
            &amp;lt;targetPath&amp;gt;css/common&amp;lt;/targetPath&amp;gt;
            &amp;lt;filtering&amp;gt;false&amp;lt;/filtering&amp;gt;
        &amp;lt;/resource&amp;gt;
        &amp;lt;resource&amp;gt;
            &amp;lt;directory&amp;gt;dist/common/img&amp;lt;/directory&amp;gt;
            &amp;lt;targetPath&amp;gt;css/img&amp;lt;/targetPath&amp;gt;
            &amp;lt;filtering&amp;gt;false&amp;lt;/filtering&amp;gt;
        &amp;lt;/resource&amp;gt;
    &amp;lt;/webResources&amp;gt;
&amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;
&amp;lt;/plugins&amp;gt;
&amp;lt;/build&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Sat, 02 Aug 2014 00:00:00 -0400</pubDate>
        <link>http://udaytv.github.io/Bower-Registry/</link>
        <guid isPermaLink="true">http://udaytv.github.io/Bower-Registry/</guid>
      </item>
    
      <item>
        <title>Using spring property place holder</title>
        <description>&lt;p&gt;We all freqently, use spring property holder in our spring based applications. But there are few cavets that are worth revisiting.&lt;/p&gt;

&lt;p&gt;Old Way&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;context:property-placeholder location=&amp;quot;application.properties&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Spring 3.1&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;---spring.xml---

&amp;lt;bean class=&amp;quot;org.springframework.context.support.PropertySourcesPlaceholderConfigurer&amp;quot;&amp;gt;
  &amp;lt;property name=&amp;quot;locations&amp;quot;&amp;gt;
   &amp;lt;list&amp;gt;
    &amp;lt;value&amp;gt;classpath:application.properties&amp;lt;/value&amp;gt;
    &amp;lt;value&amp;gt;classpath:rabbitmq.properties&amp;lt;/value&amp;gt;
   &amp;lt;/list&amp;gt;
&amp;lt;/property&amp;gt;
  &amp;lt;property name=&amp;quot;ignoreUnresolvablePlaceholders&amp;quot; value=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The real goodness happens below. The @Autowired together with @Value let spring initilize component with w/o no argument constructor. Note &amp;#39;:&amp;#39; in @Value is used to specify default value.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@Component
public class QueueConsumer extends EndPoint implements Runnable, Consumer {

    @Autowired
    public QueueConsumer( @Value(&amp;quot;${rabbit.host:192.168.0.112}&amp;quot;) String host,
                          @Value(&amp;quot;${rabbit.endpoint:queue}&amp;quot;) String endPointName) throws IOException{
        super(host, endPointName);
    }

...
}    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And lastly, obtaining properties via the new Environment APIs.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;@Autowired
private Environment env;

dataSource.setUrl(env.getProperty(&amp;quot;jdbc.url&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://www.baeldung.com/2012/02/06/properties-with-spring/&quot;&gt;Read ...&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Mar 2014 00:00:00 -0500</pubDate>
        <link>http://udaytv.github.io/Spring-Property-PlaceHolder/</link>
        <guid isPermaLink="true">http://udaytv.github.io/Spring-Property-PlaceHolder/</guid>
      </item>
    
      <item>
        <title>Jekyll post.excerpt layout</title>
        <description>&lt;p&gt;I was able to build this blog using Jekyll in less than an hour. Run into setting up posts and found quick answer on Stack Overflow.&lt;/p&gt;

&lt;p&gt;The easiest way to setup you your post headers is to add below yml at the top of your page. This is will override everything else.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;---
layout: post
title: Jekyll post.excerpt layout
date: 4 March, 2010
excerpt: I was able to build this blog using Jekyll ...
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/docs/posts/#post-excerpts&quot;&gt;Read Documentation&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Mar 2014 00:00:00 -0500</pubDate>
        <link>http://udaytv.github.io/Jekyll-Post-Layout/</link>
        <guid isPermaLink="true">http://udaytv.github.io/Jekyll-Post-Layout/</guid>
      </item>
    
  </channel>
</rss>